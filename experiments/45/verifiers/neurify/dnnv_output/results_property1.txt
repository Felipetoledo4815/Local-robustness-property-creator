Verifying property:
Forall(x_0, (((x_0 <= [[[0.957 0.918 ... 0.255 0.239] [0.98 0.988 ... 0.275 0.251] ... [0.251 0.263 ... 0.243 0.247] [0.259 0.278 ... 0.588 0.267]] [[0.992 0.98 ... 0.325 0.341] [0.996 0.996 ... 0.341 0.341] ... [0.376 0.388 ... 0.38 0.349] [0.384 0.404 ... 0.835 0.392]] [[1.  0.988 ... 0.4  0.4 ] [1.  0.996 ... 0.412 0.4 ] ... [0.608 0.627 ... 0.639 0.573] [0.616 0.643 ... 0.973 0.667]]]) & ([[[0.957 0.918 ... 0.255 0.239] [0.98 0.988 ... 0.275 0.251] ... [0.251 0.263 ... 0.243 0.247] [0.259 0.278 ... 0.588 0.267]] [[0.992 0.98 ... 0.325 0.341] [0.996 0.996 ... 0.341 0.341] ... [0.376 0.388 ... 0.38 0.349] [0.384 0.404 ... 0.835 0.392]] [[1.  0.988 ... 0.4  0.4 ] [1.  0.996 ... 0.412 0.4 ] ... [0.608 0.627 ... 0.639 0.573] [0.616 0.643 ... 0.973 0.667]]] <= x_0)) ==> ((N[0:-2](x_0) < numpy.tan(min(1.5707963267948966, ((N[0:]([[[[0.957 0.918 ... 0.255 0.239]  [0.98 0.988 ... 0.275 0.251]  ...  [0.251 0.263 ... 0.243 0.247]  [0.259 0.278 ... 0.588 0.267]] [[0.992 0.98 ... 0.325 0.341]  [0.996 0.996 ... 0.341 0.341]  ...  [0.376 0.388 ... 0.38 0.349]  [0.384 0.404 ... 0.835 0.392]] [[1.  0.988 ... 0.4  0.4 ]  [1.  0.996 ... 0.412 0.4 ]  ...  [0.608 0.627 ... 0.639 0.573]  [0.616 0.643 ... 0.973 0.667]]]]) + ((3.141592653589793 * 45.0) / 180)) / 2)))) & (numpy.tan(max(-1.5707963267948966, ((N[0:]([[[[0.957 0.918 ... 0.255 0.239]  [0.98 0.988 ... 0.275 0.251]  ...  [0.251 0.263 ... 0.243 0.247]  [0.259 0.278 ... 0.588 0.267]] [[0.992 0.98 ... 0.325 0.341]  [0.996 0.996 ... 0.341 0.341]  ...  [0.376 0.388 ... 0.38 0.349]  [0.384 0.404 ... 0.835 0.392]] [[1.  0.988 ... 0.4  0.4 ]  [1.  0.996 ... 0.412 0.4 ]  ...  [0.608 0.627 ... 0.639 0.573]  [0.616 0.643 ... 0.973 0.667]]]]) - ((3.141592653589793 * 45.0) / 180)) / 2))) < N[0:-2](x_0)))))

Verifying Networks:
N:
Input_0                         : Input([  1   3 100 100], dtype=float32)
Conv_0                          : Conv(Input_0, kernel_shape=[5, 5], strides=[5, 5], pads=[0, 0, 0, 0])
Relu_0                          : Relu(Conv_0)
Conv_1                          : Conv(Relu_0, kernel_shape=[5, 5], strides=[5, 5], pads=[0, 0, 0, 0])
Relu_1                          : Relu(Conv_1)
Transpose_0                     : Transpose(Relu_1, permutation=[0 2 3 1])
Flatten_0                       : Flatten(Transpose_0, axis=1)
Gemm_0                          : Gemm(Flatten_0, ndarray(shape=(100, 576)), ndarray(shape=(100,)))
Relu_2                          : Relu(Gemm_0)
Gemm_1                          : Gemm(Relu_2, ndarray(shape=(1, 100)), [-0.00807803])
Atan_0                          : Atan(Gemm_1)
Mul_0                           : Mul(Atan_0, 2.0)

dnnv.verifiers.neurify
  result: sat
  time: 1358.5010
