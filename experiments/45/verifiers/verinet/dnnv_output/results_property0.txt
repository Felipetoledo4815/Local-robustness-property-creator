Verifying property:
Forall(x_0, (((x_0 <= [[[0.122 0.133 ... 0.169 0.2 ] [0.118 0.051 ... 0.192 0.192] ... [0.318 0.31 ... 0.404 0.98 ] [0.325 0.318 ... 0.365 0.341]] [[0.059 0.075 ... 0.169 0.196] [0.102 0.035 ... 0.192 0.18 ] ... [0.318 0.31 ... 0.38 0.941] [0.325 0.318 ... 0.345 0.314]] [[0.024 0.075 ... 0.129 0.176] [0.09 0.051 ... 0.161 0.161] ... [0.318 0.31 ... 0.396 0.941] [0.325 0.318 ... 0.361 0.341]]]) & ([[[0.122 0.133 ... 0.169 0.2 ] [0.118 0.051 ... 0.192 0.192] ... [0.318 0.31 ... 0.404 0.98 ] [0.325 0.318 ... 0.365 0.341]] [[0.059 0.075 ... 0.169 0.196] [0.102 0.035 ... 0.192 0.18 ] ... [0.318 0.31 ... 0.38 0.941] [0.325 0.318 ... 0.345 0.314]] [[0.024 0.075 ... 0.129 0.176] [0.09 0.051 ... 0.161 0.161] ... [0.318 0.31 ... 0.396 0.941] [0.325 0.318 ... 0.361 0.341]]] <= x_0)) ==> ((numpy.tan(max(-1.5707963267948966, ((N[0:]([[[[0.122 0.133 ... 0.169 0.2 ]  [0.118 0.051 ... 0.192 0.192]  ...  [0.318 0.31 ... 0.404 0.98 ]  [0.325 0.318 ... 0.365 0.341]] [[0.059 0.075 ... 0.169 0.196]  [0.102 0.035 ... 0.192 0.18 ]  ...  [0.318 0.31 ... 0.38 0.941]  [0.325 0.318 ... 0.345 0.314]] [[0.024 0.075 ... 0.129 0.176]  [0.09 0.051 ... 0.161 0.161]  ...  [0.318 0.31 ... 0.396 0.941]  [0.325 0.318 ... 0.361 0.341]]]]) - ((3.141592653589793 * 45.0) / 180)) / 2))) < N[0:-2](x_0)) & (N[0:-2](x_0) < numpy.tan(min(1.5707963267948966, ((N[0:]([[[[0.122 0.133 ... 0.169 0.2 ]  [0.118 0.051 ... 0.192 0.192]  ...  [0.318 0.31 ... 0.404 0.98 ]  [0.325 0.318 ... 0.365 0.341]] [[0.059 0.075 ... 0.169 0.196]  [0.102 0.035 ... 0.192 0.18 ]  ...  [0.318 0.31 ... 0.38 0.941]  [0.325 0.318 ... 0.345 0.314]] [[0.024 0.075 ... 0.129 0.176]  [0.09 0.051 ... 0.161 0.161]  ...  [0.318 0.31 ... 0.396 0.941]  [0.325 0.318 ... 0.361 0.341]]]]) + ((3.141592653589793 * 45.0) / 180)) / 2)))))))

Verifying Networks:
N:
Input_0                         : Input([  1   3 100 100], dtype=float32)
Conv_0                          : Conv(Input_0, kernel_shape=[5, 5], strides=[5, 5], pads=[0, 0, 0, 0])
Relu_0                          : Relu(Conv_0)
Conv_1                          : Conv(Relu_0, kernel_shape=[5, 5], strides=[5, 5], pads=[0, 0, 0, 0])
Relu_1                          : Relu(Conv_1)
Transpose_0                     : Transpose(Relu_1, permutation=[0 2 3 1])
Flatten_0                       : Flatten(Transpose_0, axis=1)
Gemm_0                          : Gemm(Flatten_0, ndarray(shape=(100, 576)), ndarray(shape=(100,)))
Relu_2                          : Relu(Gemm_0)
Gemm_1                          : Gemm(Relu_2, ndarray(shape=(1, 100)), [-0.00807803])
Atan_0                          : Atan(Gemm_1)
Mul_0                           : Mul(Atan_0, 2.0)

dnnv.verifiers.verinet
  result: VerinetError(Invalid counter example found: output outside bounds.)
  time: 17.0988
